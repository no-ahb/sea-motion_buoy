# TODO: Ocean Motion Sensing Buoy
*Active development & task tracking — maintained by agents*

**Last updated:** [Auto-updated by agents]

---

## To Do Now (for agents)

### 1. Update Project Documentation
- Edit all README files to reflect **≈10-hour** logging sessions (not 3–4 weeks).
- Incorporate the following overview in the main README and submodules.

---

### Ocean Motion Logger & Replayer  
A minimal open-hardware buoy system for capturing and reproducing 3-axis ocean-surface motion.

- Records high-rate 9-DoF IMU data (BNO085) using a Raspberry Pi Pico 2.
- Logs **linear acceleration** and **quaternion orientation** to microSD.
- Supports ~10 h battery runtime on a 2000 mAh LiPo.
- Recorded data later drives three stepper motors reproducing heave, surge, and sway.

**Firmware Features**
- 200 Hz acquisition (linear accel + quaternion)
- 20 s still-bias calibration on boot
- Binary logging in 512-record blocks
- LED + button control with safe unmount
- Power-safe block flushing and optional CRC (planned)

**Processing Workflow**
1. Parse `.bin` → timestamped samples  
2. Rotate to world frame using quaternion  
3. Filter (low-pass ≈ 4–5 Hz; high-pass 0.03–0.10 Hz)  
4. Integrate twice → displacement  
5. Downsample (200 → 10–25 Hz)  
6. Normalize 0–1 for stepper control  
7. Export CSV or stream to motor controller

---

### 2. Integrate Recent Firmware Fixes ✅
* ✅ Implement **double-buffered SD writing** to achieve stable 100–200 Hz sampling.
* ✅ Record **actual effective sample rate** at session end (written to `_meta.txt` sidecar file).
* ✅ Keep pre-allocated 18 KB block buffer + `pack_into` structure.
* ✅ Remove per-loop `flush()` calls; flush only at stop or every N blocks (configurable `FLUSH_EVERY_N`).

### 3. Enhance Desktop Decoder 
* Parse header → compute true sample rate → CSV export.
* Validate quaternion normalization and report mean norm.
* Plot optional quick-look graphs (acceleration, orientation).
* Output metadata: recording duration, sample count, rate stats.

### 4. Implement Post-Processing Workflow
* Compute **Up vector** from quaternion → project linear accel → `a_z`.
* Apply **high-pass (0.03–0.07 Hz)** and integrate twice → displacement.
* Downsample → normalize → output CSV for stepper playback.

---

## Task Whiteboard

### Firmware

* [x] Integrate double-buffer + block write system for stable 100–200 Hz logging.
* [x] Add "effective sample rate" metadata to log or sidecar file.
* [ ] Add optional CRC per block for data integrity.
* [ ] Optimize power (reduce SD writes, limit LED use during idle).
* [x] Retain LED/button FSM (bias → ready → recording → stop).

### Decoder & Processing
* [ ] Extend decoder to export CSV / NumPy formats.
* [ ] Add metadata extraction (session length, sample count, rate).
* [ ] Implement optional plotting for QA (accel, quaternion norm).
* [ ] Add basic displacement reconstruction (time- or frequency-domain).

### Testing
* [ ] Measure true sampling rate under different block sizes.
* [ ] Verify bias stability after 20 s still phase.
* [ ] Confirm linear accel ≈ 0 at rest.
* [ ] Validate data integrity over 10 h runs.

### Documentation
* [ ] Document calibration / bias routine.
* [ ] Record measured power draw and runtime.

### Hardware
* [ ] Finalize 10–15 cm buoy hull design.
* [ ] Document waterproofing and internal mounting.
* [ ] Create assembly instructions.

---

## Feature Suggestions

### Short-Term
* Add recording metadata (device ID, start time, duration) to header.
* Add LED “error” pattern (fast blink) for SD/IMU init failures.

### Long-Term
* Add gyro or temperature channels for QA.
